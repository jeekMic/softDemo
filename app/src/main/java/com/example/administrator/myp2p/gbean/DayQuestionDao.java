package com.example.administrator.myp2p.gbean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.myp2p.bean.DayQuestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_QUESTION".
*/
public class DayQuestionDao extends AbstractDao<DayQuestion, String> {

    public static final String TABLENAME = "DAY_QUESTION";

    /**
     * Properties of entity DayQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Itype = new Property(2, int.class, "itype", false, "ITYPE");
        public final static Property Rank = new Property(3, String.class, "rank", false, "RANK");
        public final static Property Classid = new Property(4, String.class, "classid", false, "CLASSID");
        public final static Property Courseid = new Property(5, String.class, "courseid", false, "COURSEID");
        public final static Property Courseid2 = new Property(6, String.class, "courseid2", false, "COURSEID2");
        public final static Property Answers = new Property(7, String.class, "answers", false, "ANSWERS");
        public final static Property Keys = new Property(8, String.class, "keys", false, "KEYS");
        public final static Property Explain = new Property(9, String.class, "explain", false, "EXPLAIN");
        public final static Property Score = new Property(10, String.class, "score", false, "SCORE");
        public final static Property Is_en = new Property(11, boolean.class, "is_en", false, "IS_EN");
        public final static Property Status = new Property(12, boolean.class, "status", false, "STATUS");
    }


    public DayQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public DayQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_QUESTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"ITYPE\" INTEGER NOT NULL ," + // 2: itype
                "\"RANK\" TEXT," + // 3: rank
                "\"CLASSID\" TEXT," + // 4: classid
                "\"COURSEID\" TEXT," + // 5: courseid
                "\"COURSEID2\" TEXT," + // 6: courseid2
                "\"ANSWERS\" TEXT," + // 7: answers
                "\"KEYS\" TEXT," + // 8: keys
                "\"EXPLAIN\" TEXT," + // 9: explain
                "\"SCORE\" TEXT," + // 10: score
                "\"IS_EN\" INTEGER NOT NULL ," + // 11: is_en
                "\"STATUS\" INTEGER NOT NULL );"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DayQuestion entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getItype());
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String classid = entity.getClassid();
        if (classid != null) {
            stmt.bindString(5, classid);
        }
 
        String courseid = entity.getCourseid();
        if (courseid != null) {
            stmt.bindString(6, courseid);
        }
 
        String courseid2 = entity.getCourseid2();
        if (courseid2 != null) {
            stmt.bindString(7, courseid2);
        }
 
        String answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(8, answers);
        }
 
        String keys = entity.getKeys();
        if (keys != null) {
            stmt.bindString(9, keys);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(10, explain);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(11, score);
        }
        stmt.bindLong(12, entity.getIs_en() ? 1L: 0L);
        stmt.bindLong(13, entity.getStatus() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DayQuestion entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getItype());
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String classid = entity.getClassid();
        if (classid != null) {
            stmt.bindString(5, classid);
        }
 
        String courseid = entity.getCourseid();
        if (courseid != null) {
            stmt.bindString(6, courseid);
        }
 
        String courseid2 = entity.getCourseid2();
        if (courseid2 != null) {
            stmt.bindString(7, courseid2);
        }
 
        String answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(8, answers);
        }
 
        String keys = entity.getKeys();
        if (keys != null) {
            stmt.bindString(9, keys);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(10, explain);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(11, score);
        }
        stmt.bindLong(12, entity.getIs_en() ? 1L: 0L);
        stmt.bindLong(13, entity.getStatus() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DayQuestion readEntity(Cursor cursor, int offset) {
        DayQuestion entity = new DayQuestion( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getInt(offset + 2), // itype
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rank
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // classid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // courseid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // courseid2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // answers
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // keys
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // explain
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // score
            cursor.getShort(offset + 11) != 0, // is_en
            cursor.getShort(offset + 12) != 0 // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DayQuestion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItype(cursor.getInt(offset + 2));
        entity.setRank(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCourseid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCourseid2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswers(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKeys(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExplain(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScore(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_en(cursor.getShort(offset + 11) != 0);
        entity.setStatus(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(DayQuestion entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DayQuestion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DayQuestion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
